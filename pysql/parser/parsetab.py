
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CONN PYCODE PYCONN PYVAL PYVAR SQLrun : run sequence\n           | sequencesequence : group\n                | connection\n                | pythonconnection : CONN\n                  | pyconnectiongroup : group statement\n             | statementstatement : fragment ';'\n                 | fragment python\n                 | fragment fragment : fragment SQL\n                | fragment insertfragment : SQL\n                | insertinsert : PYVARinsert : PYVALpython : PYCODEpyconnection : PYCONN"
    
_lr_action_items = {'CONN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[7,7,-2,-3,-4,-5,-9,-6,-7,-19,-12,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),'PYCODE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[9,9,-2,-3,-4,-5,-9,-6,-7,-19,9,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),'PYCONN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[11,11,-2,-3,-4,-5,-9,-6,-7,-19,-12,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),'SQL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[12,12,-2,12,-4,-5,-9,-6,-7,-19,20,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),'PYVAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[14,14,-2,14,-4,-5,-9,-6,-7,-19,14,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),'PYVAL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[15,15,-2,15,-4,-5,-9,-6,-7,-19,15,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[0,-2,-3,-4,-5,-9,-6,-7,-19,-12,-20,-15,-16,-17,-18,-1,-8,-10,-11,-13,-14,]),';':([10,12,13,14,15,20,21,],[18,-15,-16,-17,-18,-13,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run':([0,],[1,]),'sequence':([0,1,],[2,16,]),'group':([0,1,],[3,3,]),'connection':([0,1,],[4,4,]),'python':([0,1,10,],[5,5,19,]),'statement':([0,1,3,],[6,6,17,]),'pyconnection':([0,1,],[8,8,]),'fragment':([0,1,3,],[10,10,10,]),'insert':([0,1,3,10,],[13,13,13,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> run","S'",1,None,None,None),
  ('run -> run sequence','run',2,'p_run','parse.py',6),
  ('run -> sequence','run',1,'p_run','parse.py',7),
  ('sequence -> group','sequence',1,'p_sequence','parse.py',10),
  ('sequence -> connection','sequence',1,'p_sequence','parse.py',11),
  ('sequence -> python','sequence',1,'p_sequence','parse.py',12),
  ('connection -> CONN','connection',1,'p_connection','parse.py',15),
  ('connection -> pyconnection','connection',1,'p_connection','parse.py',16),
  ('group -> group statement','group',2,'p_group_statements','parse.py',20),
  ('group -> statement','group',1,'p_group_statements','parse.py',21),
  ('statement -> fragment ;','statement',2,'p_statement','parse.py',24),
  ('statement -> fragment python','statement',2,'p_statement','parse.py',25),
  ('statement -> fragment','statement',1,'p_statement','parse.py',26),
  ('fragment -> fragment SQL','fragment',2,'p_fragment_insert','parse.py',34),
  ('fragment -> fragment insert','fragment',2,'p_fragment_insert','parse.py',35),
  ('fragment -> SQL','fragment',1,'p_fragment_standalone','parse.py',40),
  ('fragment -> insert','fragment',1,'p_fragment_standalone','parse.py',41),
  ('insert -> PYVAR','insert',1,'p_insert_var','parse.py',45),
  ('insert -> PYVAL','insert',1,'p_insert_eval','parse.py',52),
  ('python -> PYCODE','python',1,'p_python_exec','parse.py',59),
  ('pyconnection -> PYCONN','pyconnection',1,'p_pyconnection_eval','parse.py',65),
]
